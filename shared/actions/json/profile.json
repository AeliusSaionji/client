{
  "prelude": [
    "import * as Constants from '../constants/profile'",
  ],
  "actions": {
export type AddProof = NoErrorTypedAction<'profile:addProof', {platform: PlatformsExpandedType}>
export type BackToProfile = NoErrorTypedAction<'profile:backToProfile', void>
export type CancelAddProof = NoErrorTypedAction<'profile:cancelAddProof', void>
export type CancelPgpGen = NoErrorTypedAction<'profile:cancelPgpGen', {}>
export type CheckProof = NoErrorTypedAction<'profile:checkProof', void>
export type CleanupUsername = TypedAction<'profile:cleanupUsername', void, void>
export type DropPgp = TypedAction<'profile:dropPgp', {kid: KID}, {}>
export type EditProfile = NoErrorTypedAction< 'profile:editProfile', {bio: string, fullName: string, location: string} >
export type FinishRevokeProof = TypedAction<'profile:revoke:finish', void, {error: string}>
export type FinishRevoking = NoErrorTypedAction<'profile:finishRevoking', void>
export type FinishedWithKeyGen = NoErrorTypedAction< 'profile:FinishedWithKeyGen', {shouldStoreKeyOnServer: boolean} >
export type GeneratePgp = TypedAction<'profile:generatePgp', void, void>
export type OnClickAvatar = NoErrorTypedAction< 'profile:onClickAvatar', {username: string, openWebsite: ?boolean} >
export type OnClickFollowers = NoErrorTypedAction< 'profile:onClickFollowers', {username: string, openWebsite: ?boolean} >
export type OnClickFollowing = NoErrorTypedAction< 'profile:onClickFollowing', {username: string, openWebsite: ?boolean} >
export type OutputInstructionsActionLink = NoErrorTypedAction<'profile:outputInstructionsActionLink', void>
export type ShowUserProfile = NoErrorTypedAction<'profile:showUserProfile', {username: string}>
export type SubmitZcashAddress = NoErrorTypedAction<'profile:submitZcashAddress', void>
export type SubmitBTCAddress = NoErrorTypedAction<'profile:submitBTCAddress', void>
export type SubmitRevokeProof = NoErrorTypedAction<'profile:submitRevokeProof', {proofId: string}>
export type SubmitUsername = NoErrorTypedAction<'profile:submitUsername', void>
export type UpdateErrorText = TypedAction< 'profile:updateErrorText', {errorText: ?string, errorCode: ?number}, void >
export type UpdatePgpInfo = TypedAction<'profile:updatePgpInfo', $Shape<PgpInfo>, PgpInfoError> // $Shape is meant here instead of exact, because you can supply only the parts you want to update
export type UpdatePgpPublicKey = TypedAction<'profile:updatePgpPublicKey', {publicKey: string}, {}>
export type UpdatePlatform = TypedAction<'profile:updatePlatform', {platform: PlatformsExpandedType}, void>
export type UpdateProofStatus = TypedAction< 'profile:updateProofStatus', {found: boolean, status: ProofStatus}, void >
export type UpdateProofText = TypedAction<'profile:updateProofText', {proof: string}, void>
export type UpdateSigID = TypedAction<'profile:updateSigID', {sigID: ?SigID}, void>
export type UpdateUsername = TypedAction<'profile:updateUsername', {username: string}, void>
export type Waiting = TypedAction<'profile:waiting', {waiting: boolean}, void>
export type WaitingRevokeProof = TypedAction<'profile:revoke:waiting', {waiting: boolean}, void>
  }
}
